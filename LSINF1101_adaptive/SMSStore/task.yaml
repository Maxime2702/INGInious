accessible: true
author: Tanguy De Bels
categories:
- test
contact_url: ''
context: |-
    Créez une nouvelle classe, ``SMSStore``. Avec cette classe vous pourrez instancier des objets ``SMSStore``, qui peuvent stocker des messages SMS, similaire à une boîte de réception sur un téléphone:

    .. code-block:: python

      my_inbox = SMSStore()

    Ce *store* ou stockage peut contenir plusieurs messages SMS (son état interne sera juste une liste de messages). Chaque message sera représenté comme un tuple: ``(has_been_viewed, from_number, time_arrived, text_of_SMS)``

    .. raw:: html

       <script defer>

       bodyHeight = 0;
       function postSize() {
           if (document.body.scrollHeight != bodyHeight) {
               bodyHeight = document.body.scrollHeight;
               window.parent.postMessage({height: document.body.scrollHeight}, "*");
           }
       };
       var target = document.querySelector('body');

       var observer = new MutationObserver(postSize);

       var config = { attributes: true, subtree: true }

       observer.observe(target, config);
       $(document).ready(function(){
           setTimeout(postSize, 0);
       });
       </script>
environment: default
evaluate: last
file: ''
groups: false
input_random: '0'
limits:
    time: '30'
    output: '2'
    memory: '100'
name: 'Session 8: Q* SMS Store'
network_grading: false
order: 112
problems:
    q1:
        language: python
        name: Implémentation
        type: code
        header: |-
            Une instance ``my_inbox'' de la classe ``SMSStore`` représentant une boîte de réception doit pouvoir comprendre les messages suivantes:

            .. code-block:: python

                my_inbox.add_new_arrival(from_number, time_arrived, text_of_SMS)
                    # Crée un nouveau tuple SMS, ajouté après les autres
                    # dans le stockage. Une fois créé, son attribut
                    # has_been_viewed est mis à False.

                my_inbox.message_count()
                    # Retourne le nombre de messages SMS dans my_inbox

                my_inbox.get_unread_indexes()
                    # Retourne une list des indexes de tous les messages SMS encore non lus (not-yet-viewed)

                my_inbox.get_message(i)
                    # Retourne (from_number, time_arrived, text_of_sms) pour le message[i]
                    # Change aussi son état à "has been viewed".
                    # S'il n'y a pas de message à la position i, retorune None

                my_inbox.delete(i)
                    # Supprime le message SMS se trouvant à l'index i

                my_inbox.clear()
                    # Supprime tous les messages SMS de cette boîte de réception

            Ecrivez la classe ``SMSStore`` et implémentez ces méthodes.
        default: ''
run_cmd: ''
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0
