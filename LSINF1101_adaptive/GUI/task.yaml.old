accessible: false
author: Simon Gustin
context: |-
    As a good student of this course, you want to level up a little bit your skills in programming
    and decided to try and create a *Graphical User Interface* (*GUI*).

    Specifically, you will create a class that represents a **clickable button** that can be added on a screen.
    Buttons should have:

    * a **width** (in pixel)

    * a **height** (in pixel)

    * a **label** (what is written on the button)

    * a **callback function** (the function called when the button is clicked)

    They should also have a method to "*stringify*" the instance of the button,
    that is, return a **description of the button as a string**. For example,
    a button 200px wide, 50px high, with the label "Click me!" and a callback called "explode_kittens"
    would stringify to `"Button { size:(200,50), label:'Click me!', callback:'explode_kittens' }"`.

    *Note: the canonical way to call a function that returns a string description of an object in Python
    is the following:*

    .. code-block:: python

        class Example:
            def __str__():  # Stringify method
                return "description"

    .. raw:: html

       <script defer>

       bodyHeight = 0;
       function postSize() {
           if (document.body.scrollHeight != bodyHeight) {
               bodyHeight = document.body.scrollHeight;
               window.parent.postMessage({height: document.body.scrollHeight}, "*");
           }
       };
       var target = document.querySelector('body');

       var observer = new MutationObserver(postSize);

       var config = { attributes: true, subtree: true }

       observer.observe(target, config);
       $(document).ready(function(){
           setTimeout(postSize, 0);
       });
       </script>
environment: default
evaluate: best
groups: false
input_random: '0'
limits:
    output: '2'
    memory: '100'
    time: '30'
name: 'Session 9: GUI button'
network_grading: false
order: 110
problems:
    q1:
        header: |-
            Provide the implementation of the class ``Button`` with the following **attributes**:

            * ``size``: a tuple *(<width>, <height>)*

            * ``label``: a string

            * ``callback``: a function

            and with the following **methods**:

            * a constructor which takes as arguments a tuple with 2 positive integers as the size, a string as the label and a function as the callback

            * ``__str__()``: returns a string description of the current instance

            * ``set_size(new_size)``: changes the size to a new tuple with two positive integers

            * ``set_label(new_label)``: changes the label to a new string

            * ``on_click(new_callback)``: changes the callback to a new function (you don't need to check the number of parameters of the function)

            * ``clicked()``: calls the callback function

            You should raise an ``ValueError`` if you get an **invalid argument** to a method.

            *Note (1): you can test whether a variable contains a function,
            you can use the function ``callable(var)`` which returns ``True`` if ``var`` contains a function.*

            *Note (2): you can get the name of a function (stored in a variable or not) using their attribute ``__name__``.
            For example:*

            .. code-block:: python

                def fn():
                    pass
                var = fn
                print(fn.__name__)  # prints "fn"
                print(var.__name__)  # prints "fn"
        type: code
        name: Implementation
        default: ''
        language: python
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0
