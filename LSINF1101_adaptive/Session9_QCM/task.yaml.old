accessible: false
author: ''
categories: []
context: |-
    .. raw:: html

       <script defer>

       bodyHeight = 0;
       function postSize() {
           if (document.body.scrollHeight != bodyHeight) {
               bodyHeight = document.body.scrollHeight;
               window.parent.postMessage({height: document.body.scrollHeight}, "*");
           }
       };
       var target = document.querySelector('body');

       var observer = new MutationObserver(postSize);

       var config = { attributes: true, subtree: true }

       observer.observe(target, config);
       $(document).ready(function(){
           setTimeout(postSize, 0);
       });
       </script>
environment: mcq
evaluate: best
file: ''
groups: false
input_random: '0'
limits:
    time: '30'
    memory: '100'
    output: '2'
name: 'Session 9: QCM'
network_grading: false
order: 102
problems:
    qcm1:
        choices:
        -   text: |-
                * Ce code définit un objet ``PairOfDice``.
                * ``die1`` est une variable d'instance de la classe ``PairOfDice``.
                * ``roll()`` est une méthode d'instance de la classe ``PairOfDice``.
            feedback: La première phrase est fausse. Ce code ne définit pas un objet
                mais une classe.
        -   text: |-
                * Ce code définit une classe ``PairOfDice``.
                * Chaque instance de ``PairOfDice`` a sa propre valeur pour ``die1``.
                * ``roll()`` est une méthode d'instance de la classe ``PairOfDice``.
            valid: true
        -   text: |-
                * Une instance de ``PairOfDice`` est un objet.
                * ``die1`` est une variable d'instance de la classe ``PairOfDice``.
                * L'effet de l'exécution de la méthode ``roll()`` est indépendant de l'instance à laquelle elle s'applique.
            feedback: La troisième phrase est fausse. L'effet de l'exécution de la
                méthode roll() dépend de l'instance à laquelle elle s'applique, et
                plus particulièrement des valeurs contenues dans les variables d'instance.
        type: multiple_choice
        success_message: Réponse correcte
        header: |-
            Soit le code Python suivant:

            .. code-block:: python

                from random import randint  # we need random numbers in the code below

                class PairOfDice :

                    def __init__(self, val1, val2):
                        """
                            Creates an object representing a pair of dice.
                            pre:  val1, val2 are valid die values
                            post: creates a pair of dice that are initially
                                  showing the values val1 and val2.
                        """
                        self.die1 = val1; # Number showing on the first die.
                        self.die2 = val2; # Number showing on the second die.

                    def roll(self):
                        """
                            Rolls the two dice and changes the state of this instance accordingly.
                            pre:  /
                            post: sets the values of each die to be a random number between 1 and 6.
                        """
                        self.die1 = randint(0, 5) + 1
                        self.die2 = randint(0, 5) + 1

            Laquelle des propositions ci-dessous est correcte ?
        name: Classes, objets et instances
        limit: 0
        error_message: Réponse incorrecte
    qcm2:
        error_message: Réponse incorrecte
        choices:
        -   feedback: |-
                Cette définition est incorrecte.
                Dans la méthode `value()` on a oublié le paramètre `self`
                ainsi que les références vers `self` pour accéder aux attributs.
            text: |-
                .. code-block:: python

                    class Fraction :

                        def __init__(self, n, d):
                            """
                                Creates an object representing a fraction.
                                pre:  n is an integer representing the numerator of the fraction
                                      d is an integer representing the denominator of the fraction
                                post: creates an object representing the fraction n/d
                            """
                            self.num = n; # numerator.
                            self.den = d; # denominator.

                        def value():
                            """
                                pre:  /
                                post: returns a float with the value of the fraction n/d
                            """
                            return float(num) / float(den)
        -   text: |-
                .. code-block:: python

                    class Fraction :

                        def __init__(self, n, d):
                            """
                                Creates an object representing a fraction.
                                pre:  n is an integer representing the numerator of the fraction
                                      d is an integer representing the denominator of the fraction
                                post: creates a n object representing the fraction n/d
                            """
                            self.num = n; # numerator.
                            self.den = d; # denominator.

                        def value(self):
                            """
                                pre:  /
                                post: returns a float with the value of the fraction n/d
                            """
                            return float(self.num) / float(self.den)
            valid: true
        -   feedback: |-
                Cette version est incorrecte.
                L'erreur est qu'on a ajouté l'instruction `return Fraction(n,d)`
                à la fin de la méthode d'initialisation.
                Ceci va créer une boucle infinie. Pourquoi?
            text: |-
                .. code-block:: python

                    class Fraction :

                        def __init__(self, n, d):
                            """
                                Creates an object representing a fraction.
                                pre:  n is an integer representing the numerator of the fraction
                                      d is an integer representing the denominator of the fraction
                                post: creates a n object representing the fraction n/d
                            """
                            self.num = n; # numerator.
                            self.den = d; # denominator.
                            return Fraction(n,d)

                        def value(self):
                            """
                                pre:  /
                                post: returns a float with the value of the fraction n/d
                            """
                            return float(self.num) / float(self.den)
        success_message: Réponse correcte
        type: multiple_choice
        name: 'Définition de classe '
        limit: 0
        header: |-
            Laquelle des définitions suivantes définit correctement une classe dont les instances représentent des fractions (num / den), telle que les instructions:

            .. code-block:: python

                f = Fraction(3,4)
                print(f.value())

            impriment le résultat 0.75 ?
    qcm3:
        limit: 0
        choices:
        -   text: |-
                #.  Imprime la référence vers un objet de type fraction, par exemple: `<__main__.Fraction object at 0x103f48550>`
                #.  Imprime `0.75`
                #.  Imprime une référence vers la méthode `value` définie dans la classe `Fraction`, par exemple: `<bound method Fraction.value of <__main__.Fraction object at 0x104b48518>>`
                #.  Renvoie `3`
                #.  Renvoie une erreur pour dire que l'objet de type `Fraction` ne contient pas d'attribut nommé `'n'`: `AttributeError: 'Fraction' object has no attribute 'n'`
            valid: true
        -   feedback: La troisième et dernière phrase sont fausses.
            text: |-
                #. Imprime la référence vers un objet de type `Fraction`, par exemple: `<__main__.Fraction object at 0x103f48550>`
                #. Imprime `0.75`
                #. Renvoie une erreur que l'objet de type `Fraction` ne contient pas d'attribut nommé `value`
                #. Renvoie `3`
                #. Renvoie `3`
        -   text: |-
                #. Renvoie une erreur que l'objet `f` n'est pas initialisé
                #. Imprime `0.75`
                #. Renvoie une erreur que l'objet de type `Fraction` ne contient pas d'attribut nommé `value`
                #. Renvoie `3`
                #. Renvoie une erreur pour dire que l'objet de type `Fraction` ne contient pas d'attribut nommé `n`
            feedback: La première et troisième phrase sont fausses.
        header: |-
            Sur base de la seule définition correcte de la question précédente, que se passe-t-il
            si on tente de compiler et d'exécuter la suite d'instructions suivante ?

            .. code-block:: python

                f = Fraction(3, 4)
                print(f)            # instruction 1
                print(f.value())    # instruction 2
                print(f.value)      # instruction 3
                print(f.num)        # instruction 4
                print(f.n)          # instruction 5
        error_message: Réponse incorrecte
        type: multiple_choice
        success_message: Réponse correcte
        name: 'Accès aux attributs et méthodes d''un objet '
    qcm4:
        choices:
        -   feedback: |-
                Faux. Les instructions 2 et 4 donnent une erreur.
                Attention: la dernière instruction 5 ne donne pas d'erreur car l'attribut `d` vient d'être assigné juste avant.
            text: |-
                #. Imprime 3
                #. Imprime 3
                #. Imprime 5
                #. Imprime 5
                #. Imprime 6
        -   valid: true
            feedback: |-
                Il est peut être surprenant que la cinquième instruction ne produit pas une erreur.
                Il est en effet possible en Python, d'ajouter dynamiquement des variables d'instance.
                L'instruction `f.d = 6` a assigné la valeur `6` à un nouvel attribut `d` de l'objet `f`.
                Néanmoins, ce n'est pas une bonne pratique de le faire.
            text: |-
                #. Imprime 3
                #. AttributeError: 'Fraction' object has no attribute 'n'
                #. Imprime 5
                #. AttributeError: 'Fraction' object has no attribute 'd'
                #. Imprime 6
        -   feedback: |-
                L'instruction 3 est fausse car doit imprimer 5 au lieu de 4.
                Bizarrement, l'instruction 5 ne donne pas d'erreur non plus.
                La raison est que l'attribut d vient d'être assigné juste avant.
                On peut donc dynamiquement ajouter des attributs à des objets existants.
                Néanmoins, ce n'est pas une bonne pratique de le faire.
            text: |-
                #. Imprime 3
                #. AttributeError: 'Fraction' object has no attribute 'n'
                #. Imprime 4
                #. AttributeError: 'Fraction' object has no attribute 'd'
                #. AttributeError: 'Fraction' object has no attribute 'd'
        header: |-
            Sur base de la définition correcte de la classe `Fraction` (cf. question 2),
            que se passe-t-il si on tente de compiler et d'exécuter
            la suite d'instructions suivante ?

            .. code-block:: python

                f = Fraction(3, 4)
                print(f.num)    # instruction 1
                print(f.n)      # instruction 2
                f.den = 5
                print(f.den)    # instruction 3
                print(f.d)      # instruction 4
                f.d = 6
                print(f.d)      # instruction 5
        type: multiple_choice
        limit: 0
        success_message: Réponse correcte
        name: 'Lire et modifier l''état d''un objet '
        error_message: Réponse incorrecte
    qcm5:
        choices:
        -   text: |-
                .. code-block:: python

                    class Etudiant:
                        def __init__(self,n,m):
                            nom = n
                            matricule = m
                            bisseur = False
            feedback: Faux. On doit assigner à `self.nom`, `self.matricule`, etc.
        -   text: |-
                .. code-block:: python

                    class Etudiant:
                        def __init__(n,m):
                            self.nom = n
                            self.matricule = m
                            self.bisseur = False
            feedback: Faux. On a oublié le paramètre `self` de la méthode `__init__`
        -   text: |-
                .. code-block:: python

                    class Etudiant:
                        def __init__(self,n,m):
                            self.nom = n
                            self.matricule = m
                            self.bisseur = False
            valid: true
        -   text: |-
                .. code-block:: python

                    class Etudiant:
                        def __init__(self,n,m,bisseur = False):
                            self.nom = n
                            self.matricule = m
            feedback: |-
                Ce code est incorrect, mais c'est assez subtil.
                L'argument `bisseur = False` correspond à une assignation implicite dans le corps de la méthode.
                Le problème est qu'on assigne `False` à `bisseur` au lieu de à `self.bisseur`.
        -   text: |-
                .. code-block:: python

                    class Etudiant:
                        def __init__(self,n,m):
                            self.nom = n
                            self.matricule = m
                            self.bisseur = False
                            return self
            feedback: Faux. Une méthode d'initialisation ne doit pas avoir un `return`.
        header: |
            Parmi les définitions de méthodes d'initialisation suivantes, laquelle est correcte pour une classe `Etudiant` telle que le code suivant affiche le texte suivant :

            .. code-block:: python

                >>> e = Etudiant("Quentin Delaunois","19552508")
                >>> print(e.nom)
                Quentin Delaunois
                >>> print(e.matricule)
                19552508
                >>> print(e.bisseur)
                False
        success_message: Réponse correcte
        name: 'Méthode d''initialisation '
        limit: 0
        type: multiple_choice
        error_message: Réponse incorrecte
    qcm6:
        type: multiple_choice
        name: Références
        error_message: Réponse incorrecte
        choices:
        -   text: |-
                * 15,20
                * 25,40
                * 25,0
        -   valid: true
            text: |-
                * 15,20
                * 40,40
                * 40,0
        -   text: |-
                * 15,20
                * 20,40
                * 20,0
        success_message: Réponse correcte
        limit: 0
        header: |-
            Soit la classe `Compteur` suivante

            .. code-block:: python

                class Compteur:

                    def __init__(self,n):
                        self.compte = n

                    def __str__(self):
                        return str(self.valeur())

                    def ajout(self,n):
                        self.compte += n

                    def valeur(self):
                        return self.compte;

            Qu'imprime le programme suivant

            .. code-block:: python

                c1 = Compteur(10)
                c2 = Compteur(20)
                c1.ajout(5)
                print("{},{}".format(c1,c2))
                c1.ajout(10)
                c1 = c2
                c2.ajout(20)
                print("{},{}".format(c1,c2))
                c2 = Compteur(0)
                print("{},{}".format(c1,c2))
    qcm7:
        choices:
        -   text: |-
                .. code-block:: python

                    def __str__(self):
                        print(self.nom + " (" + self.matricule + ")")
                        if self.bisseur : print(" bisseur")
                        else : print(" non-bisseur")
            feedback: |-
                Cette solution est incorrecte.
                La méthode est supposé de renvoyer un string, pas d'imprimer elle même.
                Une erreur est produit car il n'y a pas d'instruction `return` dans cette méthode.
        -   feedback: |-
                Cette solution est incorrecte.
                La méthode ne renvoie pas l'information si l'étudiant est bisseur ou pas.
                Le problème est que après la première instruction `return`, on sort de la méthode et on n'atteint donc jamais la condition `if` qui contient l'autre instruction `return`.
            text: |-
                .. code-block:: python

                    def __str__(self) :
                        return self.nom + " (" + self.matricule + ")"
                        if self.bisseur :
                            return " bisseur"
                        else :
                            return " non-bisseur"
        -   text: |-
                .. code-block:: python

                    def __str__(self) :
                        s = self.nom + " (" + self.matricule + ")"
                        if self.bisseur :
                            s += " bisseur"
                        else :
                            s += " non-bisseur"
                        return s;
            valid: true
        type: multiple_choice
        error_message: Réponse incorrecte
        header: |-
            Comment écrirait-on une méthode pour la classe `Etudiant` de la question 5,
            telle que le code suivant affiche le texte suivant :

            .. code-block:: python

                >>> e = Etudiant("Quentin Delaunois","19552508")
                >>> print(e)
                "Quentin Delaunois (19552508) non-bisseur"
        name: 'Méthode de conversion vers string '
        limit: 0
        success_message: Réponse correcte
    qcm8:
        limit: 0
        choices:
        -   feedback: La ligne **1** renverra False car ``d2`` réfère à l'objet Drapeau
                d1 qui a été mis à ``False``
            text: La ligne **1** imprime ``True``.
        -   text: La ligne **1** imprime ``False``.
            valid: true
        -   valid: true
            text: La ligne **2** imprime ``True``.
        -   feedback: La valeur affectée à ``d2`` est la valeur primitive stockée
                dans ``d1`` et non une référence. Le changement de ``d1`` n'a donc
                aucun impact sur ce que contient ``d2``
            text: La ligne **2** imprime ``False``.
        -   feedback: La ligne 3 imprime la référence vers l'objet car nous n'appelons
                pas une fonction de représentation et n'accédons pas à l'un  de ses
                attributs.
            text: La ligne **3** imprime ``True``.
        -   feedback: La valeur passée lors de la création de l'objet ``d1`` est une
                valeur primitive. Par la suite, la réaffectation de la valeur de``b1``
                n'a donc pas d'impact car ce n'était pas la référence qui avait été
                stockée.
            text: La ligne **3** imprime ``False``.
        header: |-
            Considérons la classe ``Drapeau`` suivante:

            .. code-block:: python

                class Drapeau:
                    """
                    Une classe simple avec un objet contenant un booléen.
                    """
                    def __init__ (self, b):
                        """
                        @pre :  -
                        @post : un objet de type Drapeau est crée et représente le booléen passé en argument
                        """
                        self.drapeau = b

            Et les trois suites d'instructions suivantes:

            .. code-block:: python

                    d1 = Drapeau(True)
                    d2 = Drapeau(True)
                    d2 = d1
                    d1.drapeau = False
                    print(d2)
                    print(d2.drapeau)  ##1##

                    b1 = True
                    b2 = False
                    b2 = b1
                    b1 = False
                    print(b2)          ##2##

                    b1 = True
                    d1 = Drapeau(b1)
                    b2 = False
                    d2 = Drapeau(b2)
                    b2 = b1
                    b1 = False
                    print(d1)          ##3##

            Lesquelles des affirmations suivantes sont vraies?
        name: 'Références '
        error_message: Réponse incorrecte. (Avez-vous bien coché tous les choix corrects?)
        success_message: Réponse correcte
        multiple: true
        type: multiple_choice
run_cmd: ''
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0
