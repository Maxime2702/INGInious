accessible: 2018-10-19 12:00:00/
author: Tanguy De Bels & Siegfried Nijssen
context: |-
    .. raw:: html

       <script defer>

       bodyHeight = 0;
       function postSize() {
           if (document.body.scrollHeight != bodyHeight) {
               bodyHeight = document.body.scrollHeight;
               window.parent.postMessage({height: document.body.scrollHeight}, "*");
           }
       };
       var target = document.querySelector('body');

       var observer = new MutationObserver(postSize);

       var config = { attributes: true, subtree: true }

       observer.observe(target, config);
       $(document).ready(function(){
           setTimeout(postSize, 0);
       });
       </script>
environment: mcq
evaluate: best
groups: false
input_random: '0'
limits:
    time: '30'
    output: '2'
    memory: '100'
name: 'Session 5: QCM'
network_grading: false
order: 47
problems:
    q1:
        choices:
        -   text: |-
                .. code-block:: python

                    matrix = [[0 for j in range(4)] for i in range(3)]
                    for i in range(3):
                        for j in range(4):
                            matrix[i][j] = i + j
            valid: true
        -   text: |-
                .. code-block:: python

                    matrix = [[0 for j in range(3)] for i in range(4)]
                    for i in range(4):
                        for j in range(3):
                            matrix[i][j] = i + j
            feedback: Le résultat ici est ``[[0, 1, 2], [1, 2, 3], [2, 3, 4], [3,
                4, 5]]``.
        -   text: |-
                .. code-block:: python

                    matrix = []
                    for i in range(3):
                        matrix[i] = []
                        for j in range(4):
                            matrix[i].append(i + j)
            feedback: On ne peut pas stocker une valeur comme ``[]`` sur une position
                qui n'existe pas; la variable ``matrix`` a été initialisé avec une
                liste vide!
        -   valid: true
            text: |-
                .. code-block:: python

                    matrix = []
                    for i in range(3):
                        matrix.append([])
                        for j in range(4):
                            matrix[i].append(i + j)
        header: |-
            On veut créer la matrice ``matrix = [[0,1,2,3],[1,2,3,4],[2,3,4,5]]``.
            Lesquels parmi les programmes suivants font cela?
        multiple: true
        name: Matrices
        limit: 0
        type: multiple_choice
    q2:
        choices:
        -   text: |-
                .. code-block:: python

                    Jean
                    Charles
                    Marc
            valid: true
        -   text: |-
                .. code-block:: python

                    ("Jean",1)
                    ("Charles",3)
                    ("Marc",5)
            feedback: Seulement la première partie de chaque tuple est imprimée.
        -   text: |-
                .. code-block:: python

                    1
                    3
                    5
            feedback: Seulement la première partie de chaque tuple est imprimée.
        limit: 0
        multiple: true
        type: multiple_choice
        name: Tuples
        header: |-
            Considérons le fragment de programme ci-dessous.

            .. code-block:: python

                l = [("Jean",1), ("Charles",3), ("Marc", 5)]
                for a, b in l:
                  print (a)

            Quel est le résultat de ce programme?
    q3:
        type: multiple_choice
        choices:
        -   text: |-
                .. code-block:: python

                      def pos_index(matrix):
                        l = []
                        for i in matrix:
                          for j in matrix[i]:
                            if matrix[i][j] == 1:
                              l.append((i, j))
                        return l
            feedback: Variable ``i`` est une ligne de la matrice, pas un index; par
                conséquence, ``matrix[i]`` donne une erreur.
        -   text: |-
                .. code-block:: python

                      def pos_index(matrix):
                        l = []
                        for i, ligne in enumerate(matrix):
                          for j, v in enumerate(ligne):
                            if v == 1:
                              l.append ((i, j))
                        return l
            valid: true
        -   text: |-
                .. code-block:: python

                      def pos_index(matrix):
                        l = []
                        for i in range(len(matrix)):
                          ligne = matrix[i]
                          for j in range(len(ligne)):
                            if ligne[j] == 1:
                              l.append(i, j)
                        return l
            feedback: Le statement ``l.append(i,j)`` n'est pas correct, puisque ``append``
                n'accepte qu'un seul argument.
        -   text: |-
                .. code-block:: python

                      def pos_index(matrix):
                        l = []
                        for i in range(len(matrix)):
                          ligne = matrix[i]
                          for j in range(len(ligne)):
                            if ligne[j] == 1:
                              l.append((i, j))
                        return l
            valid: true
        header: |-
            Soit une matrice ``matrix`` avec seulement les valeurs 0 et 1,
            on veut créer une liste des coordonnées des coefficients de la matrice
            avec la valeur 1. Par exemple, pour la matrice ``[[1,0,1],[0,1,0]]`` le
            résultat doit être ``[(0,0),(0,2),(1,1)]``.

            Lesquels parmi les programmes suivants font cela?
        limit: 0
        multiple: true
        name: Matrice vers Liste
    q4:
        multiple: true
        choices:
        -   text: |-
                .. code-block:: python

                    def nest(l):
                        new_l = []
                        new_ll = []
                        for v in l:
                            if v == 0:
                                new_l.append(new_ll)
                                new_ll = []
                            else:
                                new_ll.append(v)
                        return new_l
            feedback: Le premier zero n'est pas traité correctement; une liste vide
                est ajoutée.
        -   text: |-
                .. code-block:: python

                    def nest(l):
                        new_l = []
                        new_ll = []
                        for v in l[1:]:
                            if v == 0:
                                new_l.append(new_ll)
                            else:
                                new_ll.append(v)
                        return new_l
            feedback: Il est nécesaire de réinitialiser ``new_ll``; sinon, cette liste
                devient la base des listes suivantes.
        -   text: |-
                .. code-block:: python

                    def nest(l):
                        new_l = []
                        new_ll = []
                        for v in l:
                            if v == 0:
                                new_l += [new_ll]
                                new_ll = []
                            else:
                                new_ll.append(v)
                        return new_l
            feedback: Le premier zero n'est pas traité correctement; une liste vide
                est ajoutée.
        -   valid: true
            text: |-
                .. code-block:: python

                    def nest(l):
                        new_l = []
                        new_ll = []
                        for v in l[1:]:
                            if v == 0:
                                new_l.append(new_ll)
                                new_ll = []
                            else:
                                new_ll.append(v)
                        return new_l
        header: |-
            Soit une liste de nombres entiers qui commence par un zéro et se termine par un zéro,  on veut créer une nouvelle liste avec tous les nombres entiers entre deux 0 imbriquée dans une sous-liste. Par exemple, pour la liste ``[0,1,2,3,4,0,1,3,4,0,0,5,6,0,4,5,0]`` on veut créer la nouvelle liste ``[[1,2,3,4],[1,3,4],[],[5,6],[4,5]]``.

            Lesquels parmi les programmes suivants font cela?
        limit: 0
        name: Conversion de listes
        type: multiple_choice
    q5:
        choices:
        -   feedback: Pour trouver un élément, il faut entrer le boucle.
            text: '0'
        -   text: '1'
            feedback: L'élément n'est pas au milieu de la liste.
        -   text: '2'
            feedback: Faites attention qu'on doit arrondir vers le bas.
        -   text: '3'
            valid: true
        -   feedback: On ne fait pas de recherche linéaire ici!
            text: '5'
        -   feedback: Il n'est pas nécessaire de considérer tous les éléments.
            text: '7'
        header: |-
            L'algorithme suivant est donné. Il a été tiré du syllabus et modifié :

            .. code-block:: python

                def binary_search(name, list_of_names):
                  first = 0
                  last = len(list_of_names)-1
                  found = False

                  while first<=last and not found:
                    middle = (first + last)//2
                    print(middle)                   # Ligne ajoutée!
                    if list_of_names[middle] == name:
                      found = True
                    else:
                      if name < list_of_names[middle]:
                        last = middle-1
                      else:
                        first = middle+1

                  return found

            Si on appelle cette fonction comme suit:

            .. code-block:: python

              binary_search( "9", ["1","3","5","8","9","12","13"])

            Combien de lignes sont imprimées par la fonction?
        type: multiple_choice
        limit: 0
        name: Binary search
    q6:
        choices:
        -   feedback: Pour trouver un élément, il faut entrer le boucle.
            text: '0'
        -   feedback: L'élément n'est pas au milieu de la liste.
            text: '1'
        -   text: '2'
            feedback: Faites attention qu'on doit arrondir vers le bas.
        -   valid: true
            text: '3'
        -   text: '5'
            feedback: On ne fait pas de recherche linéaire ici!
        -   feedback: Il n'est pas nécessaire de considérer tous les éléments.
            text: '7'
        limit: 0
        type: multiple_choice
        name: Binary search
        header: |-
            Toujours avec l'algorithme de l'exercice précédent.
            Si on appelle cette fonction comme suit:

            .. code-block:: python

              binary_search( "7", ["1","3","5","8","9","12","13"])

            Combien de lignes sont imprimées par la fonction?
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0
