accessible: false
author: Tanguy De Bels
categories: []
contact_url: ''
context: |-
    Dans ce bilan final vous allez améliorer les fonctions mémoïsées que vous avez vu dans le cours ou lors des questions préparatoires et lors de la mission, afin que les dictionnaires utilisées par ces fonctions ne soient pas déclaré dans des variables visibles globalement, mais soient cachées localement dans les fonctions de mémoïsation mêmes.

    .. raw:: html

       <script defer>

       bodyHeight = 0;
       function postSize() {
           if (document.body.scrollHeight != bodyHeight) {
               bodyHeight = document.body.scrollHeight;
               window.parent.postMessage({height: document.body.scrollHeight}, "*");
           }
       };
       var target = document.querySelector('body');

       var observer = new MutationObserver(postSize);

       var config = { attributes: true, subtree: true }

       observer.observe(target, config);
       $(document).ready(function(){
           setTimeout(postSize, 0);
       });
       </script>
environment: default
evaluate: best
file: ''
groups: false
input_random: '0'
limits:
    time: '30'
    output: '2'
    memory: '100'
name: 'Session X: QBF'
network_grading: false
order: 105
problems:
    q1:
        header: |-
            Revisitons le code de la version mémoïsée de Fibonacci donné dans la sous-section sur la mémoïsation du `chapitre sur la récursion du syllabus <https://syllabus-interactif.info.ucl.ac.be/syllabus/info1-theory/PART_III/recursion>`_:

            .. code-block:: python

                memo = {0: 0, 1: 1}

                def fib(n):
                    if n not in memo:
                        new_value = fib(n-1) + fib(n-2)
                        memo[n] = new_value
                    return memo[n]

            Le danger d'avoir la dictionnaire *memo*, qui retient les valeurs de *fib* calculées préalablement, définie globalement est qu'elle peut alors être modifiée, accidentellement ou par exprès, de l'extérieur et ainsi corrompre les résultats calculés par la fonction.

            Comment est-ce qu'on peut adapter cette implémentation de la fonction *fib* mémoïsée, sans devoir stocker la dictionnaire *memo* dans une variable globale?

            L'idée de la solution est de créer ce qu'on appelle une *fermeture* (*closure* en anglais). On stocke la définition entière de la *fib* mémoïsée ainsi que sa dictionnaire, à l'intérieur d'une autre fonction. La conséquence est que la dictionnaire ne sera plus visible dans la portée (*scope* en anglais) globale, mais seulement à l'intérieur de cette nouvelle fonction.

            Reimplémentez la fonction *fib* mémoïsée en utilisant une telle fermeture. Vérifiez que les valeurs de la dictionnaire ne sont plus visibles globalement. Dessiner les environnements qui sont crées lors de la définition de ces fonctions et les appels à ces fonctions, avec un schémà similaire au schéma de la section *Nested Function Definitions* du chapitre `chapitre sur les fonctions d'ordre supérieur du syllabus <https://syllabus-interactif.info.ucl.ac.be/syllabus/info1-theory/PART_III/higherorder>`_.

            Implémentez à présent ``fib(n)`` en python contenant la fonction ``fib_mem(n)`` et le dictionnaire utilisé pour la mémoïsation.
        name: Fibonacci mémoisé
        language: python
        type: code
        default: ''
run_cmd: ''
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0
