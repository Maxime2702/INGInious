accessible: true
author: Simon Gustin
categories:
- test
contact_url: ''
context: |-
    Gregory made the following code to iterate over the elements of ``matrix``.

    .. code-block:: python

        matrix = [
            [8, 11, 4],
            [7, 12, 9],
            [0, -6, 0],
        ]

        sum_even = 0
        for i in range(4):
            for j in range(4):
                elem = matrix[i][j]
                if elem%2 == 0:
                    sum_even += matrix[i][j]

    As you can see, what he wanted was to **compute the sum of all the even values in the matrix**.
    However, when run, **his code crashes**.

    Find **where the mistake is** and **rewrite this code using ``while`` loops and iterators** (not ``for`` loops).

    You can consider ``matrix`` is provided (you don't have to create it) and that it will never contain something else than integers.
    Store the sum of the even number in a variable called ``sum_even`` as in the code above.

    .. raw:: html

       <script defer>

       bodyHeight = 0;
       function postSize() {
           if (document.body.scrollHeight != bodyHeight) {
               bodyHeight = document.body.scrollHeight;
               window.parent.postMessage({height: document.body.scrollHeight}, "*");
           }
       };
       var target = document.querySelector('body');

       var observer = new MutationObserver(postSize);

       var config = { attributes: true, subtree: true }

       observer.observe(target, config);
       $(document).ready(function(){
           setTimeout(postSize, 0);
       });
       </script>
environment: default
evaluate: best
file: ''
groups: false
input_random: '0'
limits:
    output: '2'
    time: '30'
    memory: '100'
name: 'Session 7: Q* Wrong iterations'
network_grading: false
order: 86
problems:
    q1:
        default: ''
        language: python
        type: code
        header: |-
            As a reminder, iterators typically have the following methods:

            .. code-block:: python

                class ExampleIterator:
                    def __iter__():  # Returns the iterator itself
                        ...
                    def __next__():  # Returns the next element to iterate on
                        ...
        name: Implementation
run_cmd: ''
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0
