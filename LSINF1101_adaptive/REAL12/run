#! /usr/bin/python3
# -*- coding: utf-8 -*-

import subprocess
import datetime
import gettext
import shlex
import sys
import os
import re

from inginious import feedback
from inginious import rst
from inginious import input


# This runner suits for mission exercises of LSINF1101/FSAB1401
# Should be adapted if used in another occasion
# Structure used:
#  -One folder : src with a proposer answer and the tests
#  -A run file
#  -A task file
# Note that beside this structure we use the global folder common (c) and common/student (cs) containing:
#  -The compiler script         (c)
#  -The tests runner script     (c)
#  -The translations folder     (cs)

os.environ['TZ'] = 'Europe/Brussels'

expected_files = ['mission12.py']
deadline = "2018-12-12"

def init_translations():
    """
        Move the translations files to student directory
        Initialize gettext and translate to the proper language
    """
    lang = input.get_lang()
    try:
        trad = gettext.GNUTranslations(open("../course/common/student/$i18n/" + lang + ".mo", "rb"))
    except FileNotFoundError:
        trad = gettext.NullTranslations()
    trad.install()
    return lang


def compute_code():
    """
        Get the files and check all needed files are present
    """
    for f in expected_files: 
        os.system('getinput "' + f[:-3] + '" > src/' + f)
        os.system('getinput "' + f[:-3] + '" > student/' + f)


def compile_code():
    """
        Compiles both the student code and the exercise code
        Provides feedback if there is any compilation error
    """
    pyc_cmd = "python3 ../course/common/compiler.py "

    with open('log.out', 'w+', encoding="utf-8") as f:
        subprocess.call(shlex.split(pyc_cmd + './student/'), universal_newlines=True, stderr=f)
        f.seek(0)
        out_student = f.read()

    if out_student != "":
        rawhtml = rst.get_codeblock("", out_student)
        feedback.set_global_result('failed')
        feedback.set_global_feedback(_("Your program does not compile: \n ") + rawhtml + "\n")
        sys.exit(0)

    with open('logTests.out', 'w+', encoding="utf-8") as f:
        subprocess.call(shlex.split(pyc_cmd + './src/'), universal_newlines=True, stderr=f)
        f.seek(0)
        out_tests = f.read()

    if out_tests != "":
        rawhtml = rst.get_codeblock("", out_tests)
        feedback.set_global_result('failed')
        feedback.set_global_feedback(_("The program does not compile for external reasons,"
                                       "please contact an administrator asap: \n ") + rawhtml + "\n")
        sys.exit(0)

    with open('logRunner.out', 'w+', encoding="utf-8") as f:
        subprocess.call(shlex.split(pyc_cmd + '../course/common/'), universal_newlines=True, stderr=f)
        f.seek(0)
        out_runner = f.read()

    if out_runner != "":
        rawhtml = rst.get_codeblock("", out_runner)
        feedback.set_global_result('failed')
        feedback.set_global_feedback(_("The program does not compile for external reasons,"
                                       "please contact an administrator asap: \n ") + rawhtml + "\n")
        sys.exit(0)


def cleanup_output(error_content):
    """
        Provides a cleaner output from the error trace

        :param error_content: string returned by the unittest failures
    """
    cleaned_lines = []
    indexes = [match.start() for match in re.finditer('AssertionError: ', error_content)]
    for i in indexes:
        cleaned_lines.append(_('Failed test:\n    ============\n'))
        cleaned_lines.extend(error_content[i + len("AssertionError: "): error_content.find("=" * 70, i)].split(('\n')))
    return '    '+'\n    '.join(cleaned_lines) if len(indexes) > 0 else error_content

        
def indente_moi_ca(texte):
    return "    " + "\n    ".join(texte.splitlines())


def run_code(lang):
    """
        Runs the student code with the tests
        Provides feedback if it contains errors

        :param lang: the language used by the user
    """
    with open('err.txt', 'w+', encoding="utf-8") as f:
        os.chdir('./student')
        py_cmd = "run_student python3 Runner.pyc " + lang
        try:
            resproc = subprocess.Popen(shlex.split(py_cmd), universal_newlines=True, stderr=f, stdout=subprocess.PIPE)
            resproc.communicate()
            result = resproc.returncode
        except (IOError, BrokenPipeError):
            result = 252
        f.flush()
        f.seek(0)
        errors = f.read()
        print(errors)
        outerr = cleanup_output(errors)
        print("TANGUY")

    
    if datetime.datetime.today() <= datetime.datetime.strptime(deadline, '%Y-%m-%d'):
        feedback.set_global_result('success')
        feedback.set_global_feedback("Votre archive est complète. \n\n" + ".. hidden-until:: " + deadline + "\n\n" + indente_moi_ca(rst.get_codeblock("", outerr)))
    else:
        # expected error code: 252=outofmemory, 253=timedout
        # 127 = code returned by our runner
        if result == 127:
            feedback.set_global_result('success')
        elif result == 252:
            feedback.set_global_result('overflow')
        elif result == 253:
            feedback.set_global_result('timeout')
        else:  # Tests failed
            feedback.set_global_result('failed')
            feedback.set_global_feedback(_("It seems that you have made mistakes in your code…\n\n") + rst.get_codeblock("", outerr) + "\n")

               
if __name__ == '__main__':
    language = init_translations()
    compute_code()
    compile_code()
    run_code(language)
